/*
 * c_Namespace
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");

function cNamespace_conceptNameIncludesNamespace(c) {
	
	var namespaceValue = c.prop(const_prop_namespace);
	var namespaceWithPreAndPostfix = const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;
	
	if (c.namespaceValue != "")
	{
			var startPos = c.name.indexOf(const_title_namespace_prefix);
			if (startPos >= 0) {
				
				return true;
				
			}
	}
	
	return false;
	
}


function cNamespace_UpdateNamespaceForSelectedConcepts(selectedConcepts, newNamespaceValue) {


	//selectedConcepts.prop(const_prop_namespace, newNamespaceValue);

	// another way to code this: 
	selectedConcepts.each(function(c) {
		
		if (cNamespace_conceptNameIncludesNamespace(c) ) {
			
			cNamespace_RemoveNamespaceFromNameOfSelectedConcepts();
			c.prop(const_prop_namespace, newNamespaceValue);
			cNamespace_AddNamespaceToNameForSelectedConcepts();
		}
		else {
			c.prop(const_prop_namespace, newNamespaceValue);
		}
		
	});	
}


function cNamespace_AddNamespaceToNameForSelectedConcepts () {

	$(selection).each(function(e) {
		var namespaceValue = e.prop(const_prop_namespace);

		if (e.namespaceValue != "")
			e.name += const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;
		
	});
}

function cNamespace_RemoveNamespaceFromNameOfSelectedConcepts () {

	$(selection).each(function(e) {

		var namespaceValue = e.prop(const_prop_namespace);
		var namespaceWithPreAndPostfix = const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;
		
		console.log("Removing " + namespaceWithPreAndPostfix + " from displayed name of " + e.name);

		if (e.namespaceValue != "")
		{
			var startPos = e.name.indexOf(const_title_namespace_prefix);
			if (startPos >= 0) {
			
				var restOfString = e.name.substring(startPos);
				var endPos = restOfString.indexOf(const_title_namespace_postfix);
				
				if (endPos >= 0) {
				
					var strToReplace = restOfString.substring(0, endPos + 1);
					console.log("strToReplace = " + strToReplace); // temptest

					e.name = e.name.replace(strToReplace, "");	
				}
			}
		}	
	});

}

function cNamespace_UserDialogInputNewNamespaceValue() {

		var propValue = window.prompt("Which value do you want to set for '"+const_prop_namespace+"' (leave empty to cancel)?", "");	
		return propValue;
}

function cNamespace_UpdateNamespaceForSelectedConceptsWithUserDialog () {
	var selectedConcepts = cModel_GetAllSelectedConcepts();
	if (selectedConcepts == null || selectedConcepts.size() < 1)
	{
		window.alert("No concepts selected. Exiting...");
		exit();
	}

	//log_ListElements(selectedConcepts, "selected elements");

	var newNamespaceValue = cNamespace_UserDialogInputNewNamespaceValue();
	//UpdateNamespaceForSelectedConcepts(selectedConcepts, newNamespaceValue);
	cNamespace_UpdateNamespaceForSelectedConcepts(selectedConcepts, newNamespaceValue);

	window.alert("Updated namespace to '" + newNamespaceValue + "' for " + selectedConcepts.size() + " concepts.");
}