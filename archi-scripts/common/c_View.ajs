/*
 * c_View
 */
 
load(__DIR__ + "../common/c_Folder.ajs");

var m_view = null;

function cView_GetSelectedElements() {

	$(selection).filter("element").each(function(e) {
		console.log("Selected element: " + e.name );			
	});
	
}
	
	
var cView_GetElementsInView = function(v) {

	var elements = $(v).children().filter("element");
	return elements;
}

var cView_GetOtherConceptsInViewWithSameName = function(vu, elm) {

    return $(vu).children().filter("element").filter(function(o) {
		
		return ( (o.name == elm.name) && ( (o.type == elm.type) && (o.concept.id != elm.concept.id)) );
	
    });
}

var cView_GetOtherOccurencesInView = function(vu, elm) {


	console.log("cView_GetOtherOccurencesInView, " + "view = " + vu.name + ", element = " + elm.name);  
	
	/*
    return $(vu).children().filter("element").filter(function(o) { // erik tbd! doesn't work for nested objects - need recursion or ...!!!!!?
		return ( o.concept.id == elm.concept.id );
	*/
	
	return $("element").filter(function(o) { 
		if (o.view == vu)
			return ( o.concept.id == elm.concept.id );
		else
			return null;
	
    });
}

var cView_MergeWithDuplicateElementsInView = function(v) {

	var elements = $(v).children().filter("element");
	return elements;
}

function CView_GetDirectlySelectedViews() {

	var selectedViews = $(selection).filter("archimate-diagram-model");
	return selectedViews;
}

function CView_GetViewsUnderSelectedFoldersAndSubfolders() {
	
	var selectedFolders = $(selection).filter("folder");
	var views = cFolder_GetAllItemsUnderGivenFoldersForGivenType(selectedFolders, "view");
	return views;
}

function CView_GetAllSelectedViews() {
	
	var folderViews = CView_GetViewsUnderSelectedFoldersAndSubfolders();
	var directlySelectedViews = CView_GetDirectlySelectedViews();
	var views = folderViews;
	views.add(directlySelectedViews);
	return views;

}


function cView_GetAllItemsInGivenViewsForGivenType(givenViews, itemType) {
	

	var views = givenViews;
	var items = null;
	var vItems = null;
	
	views.each(function(view) {
		
		vItems = $(view).find().filter(itemType);
		
		if (items == null) {
			items = fItems;
		}
		else
			items.add(fItems);
		
	});

	return items;
}