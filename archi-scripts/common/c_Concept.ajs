/*
 * c_concept
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");

 
function cConcept_GetProperties(concept) {  // maybe not needed, but keep it to show...
	
	var propList = $(concept).prop();
 	/* .each not working here!?
	propList.each(function(p) {
		console.log(p);
	});	
	*/
	
	console.log("\nProperties:");
	for (var i = 0; i < propList.size(); i++) {
		console.log(propList[i] + ": " + concept.prop( propList[i]) );
	}
	
	return propList;
}

function cConcept_getRelations(concept) { 

	var relations = $(concept).rels();
	
	/* works
	relations.each(function(r) {
		console.log(r);
	});	
	*/

	return relations;
}

function cConcept_HasProperty(concept, propertyName)
{
	console.log("cConcept_HasProperty(" + concept.name + ", " + propertyName + ")");
	
	var propList = concept.prop();
	for (var i = 0; i < propList.size(); i++) {
		
		if (propList[i] == propertyName)
			return true;
	}		

	return false;
}

function cConcept_AddOtherRelation(thisConcept, otherConcept, otherRelation) { 
	console.log("cConcept_AddOtherRelation(" + thisConcept + ", " + otherConcept + ", " + otherRelation + ")" );

	var newRelation = null;
	
	var source = $(otherRelation).sourceEnds();
	source = source.first();
	var target = $(otherRelation).targetEnds();
	target = target.first();
	
	if (source == null) {
		console.log("Error: source = 0, exiting...");
		exit();
	}
		


	console.log("source: " + source.id);
	console.log("target: " + target.id);
	
	
	//model.createRelationship(relationship-type, name, source, target);
	
	if (source.id == otherConcept.id)
		source = thisConcept;
	if (target.id == otherConcept.id)
		target = thisConcept;

	console.log("source: " + source.id);
	console.log("target: " + target.id);
	
	newRelation = model.createRelationship(otherRelation.type, otherRelation.name, source, target); // default folder
	
	console.log("new Relation created");
	
	return newRelation;

}

function cConcept_MergeWithMasterConcept(conceptToReplace, masterConcept) {


		//debug?(console.log("Merging concept " + conceptToReplace.name + ", id = " + conceptToReplace.id + " with " + masterConcept.name + ", id = " + masterConcept.id) ):true;
		console.log("Merging concept " + conceptToReplace.name + ", id = " + conceptToReplace.id + " with " + masterConcept.name + ", id = " + masterConcept.id);

		var occurencesToFix = $(conceptToReplace).objectRefs();
		occurencesToFix.each(function(o) {
			
			var view = cElement_GetView(o);
				if (view != null) {
				console.log("Merging " + o.name + ", id = " + o.id + " in view " + view + " with masterConcept id = " + masterConcept.id );
			
				var newViewObj = view.add(masterConcept, o.bounds.x, o.bounds.y, o.bounds.width, o.bounds.height); 
				o.delete(); // delete each replaced occurence
			}
						
		});	
		
		// before deleting the conceptToReplace, merge the attributes and connections
		// TBD: ask user first????
		
		// merge attributes
		var propsOfconceptToReplace = conceptToReplace.prop();
		for (var i = 0; i < propsOfconceptToReplace.size(); i++) {
			
			if (!cConcept_HasProperty(masterConcept, propsOfconceptToReplace[i]) )
				masterConcept.prop(propsOfconceptToReplace[i], conceptToReplace.prop( propsOfconceptToReplace[i]));
		}	

		// merge connections
		var relationsOfconceptToReplace = cConcept_getRelations(conceptToReplace);
		relationsOfconceptToReplace.each(function(r) {
			
			newR = cConcept_AddOtherRelation(masterConcept, conceptToReplace, r);
			
		});	
		
		// consider enhancement: show the newly created relations if the corresponding old ones were shown...
		//      ... will need to iterate tgroug all views and getDiagramComponents prior to deleting the occurences above
		
		conceptToReplace.delete(); // finally delete the replaced concept

}



function cConcept_getRelations(concept) { 

	var relations = $(concept).rels();
	
	/* works
	relations.each(function(r) {
		console.log(r);
	});	
	*/

	return relations;
}


function cConcept_SetProperty(concept, propName, propvalue) {
	
	concept.prop(propName, propvalue);
}

function cConcept_SetName(concept, name) {
	
	concept.name = name;
}

function cConcept_GetProperty(concept, propName) {
	
	//if (!cConcept_HasProperty(concept, propertyName) )
	//	return false;
	
	var propValue = concept.prop(propName);

console.log("cConcept_GetProperty propValue = ", propValue);

	return propValue;
}

function cConcept_SetLanguage(concept, language) {
	
	// 1. set the nam3
	var localizedName = null;
	var propName = null;
	

	if (language === const_prop_language_value_no) {	
		propName = const_prop_name_no;
	}
	else if (language === const_prop_language_value_en) {	
		propName = const_prop_name_en;
	}
	else {
		console.log("Error: Invalid language '" + language + "'" + ". Existing...");
	}
	
	localizedName = cConcept_GetProperty(concept, propName);
	
	if (localizedName === null) {
		console.log("Warning: Cannot set language '" + language + "' for name, due to missing property " + propName);
		return;
	}
	else if (localizedName === "") {
		console.log("Warning: cannot set name to language '" + language + "', due to blank property " + propName);
		return;
	}
	
	cConcept_SetName(concept, localizedName);



	
/*
	if (language === const_prop_language_value_no) {
		
		if (name_no === null) {
			console.log("Warning: Cannot set language '" + language + "' for name, due to missing property " + const_prop_name_no);
			return;
		}
		if (name_no === "") {
			console.log("Warning: cannot set name to language '" + const_prop_language_value_no + "', due to blank property " + const_prop_name_no);
			return;
		}
		
		cConcept_SetName(concept, name_no);
			
	}
	else if (language === const_prop_language_value_en) {
		
		if (name_en === null) {
			console.log("Warning: cannot set name to language '" + const_prop_language_value_en + "', due to missing property " + const_prop_name_en);
			return;
		}
		if (name_en === "") {
			console.log("Warning: cannot set name to language '" + const_prop_language_value_en + "', due to blank property " + const_prop_name_en);
			return;
		}
		
		
		cConcept_SetName(concept, name_en);
	}
	else {
		var errorMsg = "Error: Invalid language '" + language + "'" + ". Existing..."; 
		console.log(errorMsg);
window.alert(errorMsg);
		exit();
	}
	
*/	
	
	// 2. update the language property of the concept
	cConcept_SetProperty(concept, const_prop_language, language);

}


function cConcept_RemoveNamespaceFromName(concept) {

		var namespaceValue = concept.prop(const_prop_namespace);
		var namespaceWithPreAndPostfix = const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;
		
		console.log("Removing " + namespaceWithPreAndPostfix + " from displayed name of " + concept.name);
		
		// TODO: replace code by calling cNamespace_GetNameOfConceptWithoutNamespace!

		if (concept.namespaceValue != "") // also test for null?
		{
			var startPos = concept.name.indexOf(const_title_namespace_prefix);
			if (startPos >= 0) {
			
				var restOfString = concept.name.substring(startPos);
				var endPos = restOfString.indexOf(const_title_namespace_postfix);
				
				if (endPos >= 0) {
				
					var strToReplace = restOfString.substring(0, endPos + 1);
					//console.log("strToReplace = " + strToReplace); // temptest

					concept.name = concept.name.replace(strToReplace, "");	
				}
			}
		}	
		
		return concept.name;
}


function cConcept_AddNamespaceToName(concept) {

		var namespaceValue = concept.prop(const_prop_namespace);

		if (concept.namespaceValue != "") {
			concept.name = cConcept_RemoveNamespaceFromName(concept);
			
			var namespaceWithPreAndPostfix = const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;;
			
			console.log("Adding " + namespaceWithPreAndPostfix + " to displayed name of " + concept.name);
			//concept.name += const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;
			concept.name += namespaceWithPreAndPostfix;
		}
}